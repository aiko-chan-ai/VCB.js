{"version":3,"sources":["../src/Client.ts","../src/Crypto.ts","../src/Util.ts","../src/Interface.ts","../src/Constants.ts"],"sourcesContent":["import axios from 'axios';\nimport { wrapper } from 'axios-cookiejar-support';\nimport { CookieJar } from 'tough-cookie';\nimport * as crc from 'crc';\nimport moment from 'moment';\nimport { createHash, randomUUID } from 'node:crypto';\nimport { VCBCryptoManager } from './Crypto.js';\nimport { Util } from './Util.js';\nimport {\n\tErrorCode,\n\tVCBAccountDetailResponse,\n\tVCBAllAccountDetailResponse,\n\tVCBGetTransactionsHistoryResponse,\n\tVCBLoginSuccessResponse,\n} from './Interface.js';\nimport { WEB, Endpoints } from './Constants.js';\n\nexport class VCBRestClient {\n\tjar = new CookieJar();\n\tcryptoService!: VCBCryptoManager;\n\tclient = wrapper(\n\t\taxios.create({\n\t\t\tjar: this.jar,\n\t\t\theaders: {\n\t\t\t\t'User-Agent':\n\t\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t\t\taccept: 'application/json, text/plain, */*',\n\t\t\t\t'accept-language':\n\t\t\t\t\t'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7,fr-FR;q=0.6,fr;q=0.5',\n\t\t\t\t'sec-ch-ua':\n\t\t\t\t\t'\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\"',\n\t\t\t\t'sec-ch-ua-mobile': '?0',\n\t\t\t\t'sec-ch-ua-platform': '\"Windows\"',\n\t\t\t\t'sec-fetch-dest': 'empty',\n\t\t\t\t'sec-fetch-mode': 'cors',\n\t\t\t\t'sec-fetch-site': 'same-site',\n\t\t\t\t'x-channel': 'Web',\n\t\t\t\tReferer: 'https://vcbdigibank.vietcombank.com.vn/',\n\t\t\t\t'Referrer-Policy': 'strict-origin-when-cross-origin',\n\t\t\t},\n\t\t}),\n\t);\n\tbrowserId: string;\n\tcaptchaToken = randomUUID();\n\t#username = '';\n\t#password = '';\n\t#ottKey = ''; // Chưa thấy dùng làm gì cả\n\t#cif = '';\n\t#clientId = '';\n\t#mobileId = '';\n\t#sessionId = '';\n\tprivate generateHeader() {\n\t\t// Generate X-Request-ID\n\t\tconst currentTime = String(Date.now());\n\t\tconst randomValue = String(Math.floor(100 * Math.random()));\n\t\tconst usernameCrc = crc.crc16(this.#username).toString(16);\n\t\tconst requestID = `${currentTime}${randomValue}${usernameCrc}`;\n\t\t// Generate X-Lim-ID using SHA256\n\t\tconst sha256 = createHash('sha256');\n\t\tconst limID = sha256\n\t\t\t.update(this.#username + this.cryptoService.crcKey)\n\t\t\t.digest('hex');\n\t\treturn {\n\t\t\t'X-Lim-Id': limID,\n\t\t\t'X-Request-Id': requestID,\n\t\t};\n\t}\n\tconstructor(browserId: string) {\n\t\tif (browserId) {\n\t\t\tthis.browserId = browserId;\n\t\t} else {\n\t\t\tthrow new Error('INVALID_BROWSER_ID', {\n\t\t\t\tcause: `Bạn cần vào trang web ${WEB} để lấy BrowserId`,\n\t\t\t});\n\t\t}\n\t}\n\tprivate postWithEncrypt<T>(url: string, data: any): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!this.cryptoService) {\n\t\t\t\treject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t'Bạn cần sử dụng VCBRestClient#init() trước tiên',\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.handlerAxiosRequest<T>(\n\t\t\t\tthis.client.post(url, this.cryptoService.encryptRequest(data), {\n\t\t\t\t\theaders: this.generateHeader(),\n\t\t\t\t}),\n\t\t\t\ttrue,\n\t\t\t\t(data: any) =>\n\t\t\t\t\tJSON.parse(this.cryptoService.decryptResponse(data)),\n\t\t\t)\n\t\t\t\t.catch(reject)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (!res) {\n\t\t\t\t\t\treject(new Error('INVALID_RESPONSE'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(res);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\tlogin(username: string, password: string, captcha: string) {\n\t\treturn new Promise<VCBLoginSuccessResponse>((resolve, reject) => {\n\t\t\tthis.#username = username;\n\t\t\tthis.#password = password;\n\t\t\tthis.postWithEncrypt<VCBLoginSuccessResponse>(\n\t\t\t\t'https://digiapp.vietcombank.com.vn' +\n\t\t\t\t\tEndpoints.LOGIN.prePoint +\n\t\t\t\t\tEndpoints.LOGIN.endPoint,\n\t\t\t\t{\n\t\t\t\t\tuser: username,\n\t\t\t\t\tpassword,\n\t\t\t\t\tcaptchaValue: captcha,\n\t\t\t\t\tbrowserId: this.browserId,\n\t\t\t\t\tmid: Endpoints.LOGIN.mid,\n\t\t\t\t\tcaptchaToken: this.captchaToken,\n\t\t\t\t\tlang: 'vi',\n\t\t\t\t\tE: null,\n\t\t\t\t\tsessionId: null,\n\t\t\t\t\tDT: 'Windows',\n\t\t\t\t\tPM: 'Chrome 127.0.0.0',\n\t\t\t\t\tOV: '10', // windows 10 ?\n\t\t\t\t\tappVersion: '',\n\t\t\t\t},\n\t\t\t)\n\t\t\t\t.catch(reject)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res) {\n\t\t\t\t\t\tswitch (res.code) {\n\t\t\t\t\t\t\tcase ErrorCode.INVALID_CAPTCHA: {\n\t\t\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\t\tnew Error('INVALID_CAPTCHA', {\n\t\t\t\t\t\t\t\t\t\tcause: res.des,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase ErrorCode.USING_PHONE_VERIFY_FAILED:\n\t\t\t\t\t\t\tcase ErrorCode.USING_PHONE_VERIFY_REQUESTED: {\n\t\t\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\t\tnew Error('CANNOT_LOGIN', {\n\t\t\t\t\t\t\t\t\t\tcause: 'Bạn cần tắt tính năng Xác thực đăng nhập VCB Digibank trên WEB\\nHướng dẫn tắt:\\nCài đặt > Quản lý đăng nhập kênh > Xác thực đăng nhập VCB Digibank trên WEB',\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase ErrorCode.DISABLE_WEB_LOGIN: {\n\t\t\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\t\tnew Error('DISABLE_WEB_LOGIN', {\n\t\t\t\t\t\t\t\t\t\tcause: 'Bạn đã tắt tính năng đăng nhập VCB Digibank trên WEB\\nHướng dẫn bật:\\nCài đặt > Quản lý đăng nhập kênh > Cài đặt đăng nhập VCB Digibank trên WEB',\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase ErrorCode.INVALID_LOGIN_DATA: {\n\t\t\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\t\tnew Error('INVALID_LOGIN_DATA', {\n\t\t\t\t\t\t\t\t\t\tcause: res.des,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase ErrorCode.NEW_BROWSER: {\n\t\t\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\t\tnew Error('NEW_BROWSER', {\n\t\t\t\t\t\t\t\t\t\tcause: `Bạn hãy sử dụng trình duyệt chính, đăng nhập vào Web (nhớ chọn lưu trình duyệt), sau đó vào web ${WEB} để lấy BrowserId.\\nRồi bạn hãy sử dụng BrowserId đó với thư viện\\nnew VCBRestClient('<browserId có được ở bước trước đó>');`,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase ErrorCode.OK: {\n\t\t\t\t\t\t\t\tthis.#ottKey = res.ottKey;\n\t\t\t\t\t\t\t\tthis.#cif = res.userInfo.cif;\n\t\t\t\t\t\t\t\tthis.#clientId = res.userInfo.clientId;\n\t\t\t\t\t\t\t\tthis.#sessionId = res.userInfo.sessionId;\n\t\t\t\t\t\t\t\tthis.#mobileId = res.userInfo.mobileId;\n\t\t\t\t\t\t\t\treturn resolve(res);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\t\tnew Error('UNKNOWN_ERROR', {\n\t\t\t\t\t\t\t\t\t\tcause: res,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\tgetAllAccount() {\n\t\treturn new Promise<VCBAllAccountDetailResponse>((resolve, reject) => {\n\t\t\tthis.postWithEncrypt<VCBAllAccountDetailResponse>(\n\t\t\t\t'https://digiapp.vietcombank.com.vn' +\n\t\t\t\t\tEndpoints.GET_LIST_ACCOUNT_VIA_CIF.prePoint +\n\t\t\t\t\tEndpoints.GET_LIST_ACCOUNT_VIA_CIF.endPoint,\n\t\t\t\t{\n\t\t\t\t\tmid: Endpoints.GET_LIST_ACCOUNT_VIA_CIF.mid,\n\t\t\t\t\tlang: 'vi',\n\t\t\t\t\tuser: this.#username,\n\t\t\t\t\tcif: this.#cif,\n\t\t\t\t\tmobileId: this.#mobileId,\n\t\t\t\t\tclientId: this.#clientId,\n\t\t\t\t\tbrowserId: this.browserId,\n\t\t\t\t\tE: null,\n\t\t\t\t\tsessionId: this.#sessionId,\n\t\t\t\t\tDT: 'Windows',\n\t\t\t\t\tPM: 'Chrome 127.0.0.0',\n\t\t\t\t\tOV: '10',\n\t\t\t\t\tappVersion: '',\n\t\t\t\t},\n\t\t\t)\n\t\t\t\t.catch(reject)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (!res) {\n\t\t\t\t\t\treject(new Error('INVALID_RESPONSE'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (res.code !== ErrorCode.OK) {\n\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\tnew Error('INVALID_RESPONSE', {\n\t\t\t\t\t\t\t\t\tcause: res,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(res);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\tgetAccountDetail(accountNo: string, accountType = 'D') {\n\t\treturn new Promise<VCBAccountDetailResponse>((resolve, reject) => {\n\t\t\tthis.postWithEncrypt<VCBAccountDetailResponse>(\n\t\t\t\t'https://digiapp.vietcombank.com.vn' +\n\t\t\t\t\tEndpoints.ACCOUNT_DETAIL.prePoint +\n\t\t\t\t\tEndpoints.ACCOUNT_DETAIL.endPoint,\n\t\t\t\t{\n\t\t\t\t\tmid: Endpoints.ACCOUNT_DETAIL.mid,\n\t\t\t\t\tlang: 'vi',\n\t\t\t\t\tuser: this.#username,\n\t\t\t\t\tcif: this.#cif,\n\t\t\t\t\tmobileId: this.#mobileId,\n\t\t\t\t\tclientId: this.#clientId,\n\t\t\t\t\tbrowserId: this.browserId,\n\t\t\t\t\tE: null,\n\t\t\t\t\tsessionId: this.#sessionId,\n\t\t\t\t\tDT: 'Windows',\n\t\t\t\t\tPM: 'Chrome 127.0.0.0',\n\t\t\t\t\tOV: '10',\n\t\t\t\t\tappVersion: '',\n\t\t\t\t\taccountNo,\n\t\t\t\t\taccountType,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\t.catch(reject)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (!res) {\n\t\t\t\t\t\treject(new Error('INVALID_RESPONSE'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (res.code !== ErrorCode.OK) {\n\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\tnew Error('INVALID_RESPONSE', {\n\t\t\t\t\t\t\t\t\tcause: res,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(res);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\tgetTransactionsHistory(\n\t\taccountNo: string,\n\t\taccountType = 'D',\n\t\tfromDate: Date,\n\t\ttoDate = new Date(),\n\t) {\n\t\treturn new Promise<VCBGetTransactionsHistoryResponse>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tif (fromDate.getTime() > toDate.getTime()) {\n\t\t\t\t\treject(\n\t\t\t\t\t\tnew Error('INVALID_DATE', {\n\t\t\t\t\t\t\tcause: 'fromDate lớn hơn toDate',\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.postWithEncrypt<VCBGetTransactionsHistoryResponse>(\n\t\t\t\t\t'https://digiapp.vietcombank.com.vn' +\n\t\t\t\t\t\tEndpoints.TRANSACTION_HISTORY.prePoint +\n\t\t\t\t\t\tEndpoints.TRANSACTION_HISTORY.endPoint,\n\t\t\t\t\t{\n\t\t\t\t\t\taccountNo,\n\t\t\t\t\t\taccountType,\n\t\t\t\t\t\tfromDate: moment(fromDate).format('DD/MM/YYYY'),\n\t\t\t\t\t\ttoDate: moment(toDate).format('DD/MM/YYYY'),\n\t\t\t\t\t\tpageIndex: 0,\n\t\t\t\t\t\tlengthInPage: 999999,\n\t\t\t\t\t\tmid: Endpoints.TRANSACTION_HISTORY.mid,\n\t\t\t\t\t\tlang: 'vi',\n\t\t\t\t\t\tuser: this.#username,\n\t\t\t\t\t\tcif: this.#cif,\n\t\t\t\t\t\tmobileId: this.#mobileId,\n\t\t\t\t\t\tclientId: this.#clientId,\n\t\t\t\t\t\tbrowserId: this.browserId,\n\t\t\t\t\t\tE: null,\n\t\t\t\t\t\tsessionId: this.#sessionId,\n\t\t\t\t\t\tDT: 'Windows',\n\t\t\t\t\t\tPM: 'Chrome 127.0.0.0',\n\t\t\t\t\t\tOV: '10',\n\t\t\t\t\t\tappVersion: '',\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\t\t.catch(reject)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (!res) {\n\t\t\t\t\t\t\treject(new Error('INVALID_RESPONSE'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (res.code !== ErrorCode.OK) {\n\t\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\t\tnew Error('INVALID_RESPONSE', {\n\t\t\t\t\t\t\t\t\t\tcause: res,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresolve(res);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t},\n\t\t);\n\t}\n\tgetExcelTransactionsHistory(\n\t\taccountNo: string,\n\t\taccountType = 'D',\n\t\tfromDate: Date,\n\t\ttoDate = new Date(),\n\t) {\n\t\treturn new Promise<{\n\t\t\tname: 'lich-su-giao-dich-tai-khoan.xlsx';\n\t\t\tdata: Buffer;\n\t\t}>((resolve, reject) => {\n\t\t\tif (fromDate.getTime() > toDate.getTime()) {\n\t\t\t\treject(\n\t\t\t\t\tnew Error('INVALID_DATE', {\n\t\t\t\t\t\tcause: 'fromDate lớn hơn toDate',\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.handlerAxiosRequest<Buffer>(\n\t\t\t\tthis.client.post(\n\t\t\t\t\t'https://digiapp.vietcombank.com.vn' +\n\t\t\t\t\t\tEndpoints.EXPORT_HIS_STATEMENT_ACCOUNT_EXCEL.prePoint +\n\t\t\t\t\t\tEndpoints.EXPORT_HIS_STATEMENT_ACCOUNT_EXCEL.endPoint,\n\t\t\t\t\tthis.cryptoService.encryptRequest({\n\t\t\t\t\t\taccountName: '',\n\t\t\t\t\t\taccountCcy: 'VND',\n\t\t\t\t\t\taccountNo,\n\t\t\t\t\t\taccountType,\n\t\t\t\t\t\tfromDate: moment(fromDate).format('DD/MM/YYYY'),\n\t\t\t\t\t\ttoDate: moment(toDate).format('DD/MM/YYYY'),\n\t\t\t\t\t\tpageIndex: 0,\n\t\t\t\t\t\tlengthInPage: 999999,\n\t\t\t\t\t\tstmtDate: '',\n\t\t\t\t\t\tstmtType: '',\n\t\t\t\t\t\tcumulativeBalance: '',\n\t\t\t\t\t\tlang: 'vi',\n\t\t\t\t\t\tmid: Endpoints.EXPORT_HIS_STATEMENT_ACCOUNT_EXCEL.mid,\n\t\t\t\t\t\tuser: this.#username,\n\t\t\t\t\t\tcif: this.#cif,\n\t\t\t\t\t\tmobileId: this.#mobileId,\n\t\t\t\t\t\tclientId: this.#clientId,\n\t\t\t\t\t\tbrowserId: this.browserId,\n\t\t\t\t\t\tE: null,\n\t\t\t\t\t\tsessionId: this.#sessionId,\n\t\t\t\t\t\tDT: 'Windows',\n\t\t\t\t\t\tPM: 'Chrome 127.0.0.0',\n\t\t\t\t\t\tOV: '10',\n\t\t\t\t\t\tappVersion: '',\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseType: 'arraybuffer',\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t\ttrue,\n\t\t\t)\n\t\t\t\t.catch(reject)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (!res) {\n\t\t\t\t\t\treject(new Error('INVALID_RESPONSE'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tname: 'lich-su-giao-dich-tai-khoan.xlsx',\n\t\t\t\t\t\t\tdata: res,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\tgetCaptcha() {\n\t\treturn this.handlerAxiosRequest<Buffer>(\n\t\t\tthis.client.get(\n\t\t\t\t'https://digiapp.vietcombank.com.vn/utility-service/v2/captcha/MASS/' +\n\t\t\t\t\tthis.captchaToken,\n\t\t\t\t{\n\t\t\t\t\tresponseType: 'arraybuffer',\n\t\t\t\t},\n\t\t\t),\n\t\t\ttrue,\n\t\t\t(data: any) => Buffer.from(data),\n\t\t);\n\t}\n\tasync init() {\n\t\tconst mainJS = await Util.findMainJS();\n\t\tif (!mainJS) {\n\t\t\tthrow new Error(\n\t\t\t\t'Không tìm thấy script main.{\\\\w+}.js (Có lẽ đây là một lỗi, hãy báo cáo cho Ellie)',\n\t\t\t);\n\t\t}\n\t\tconst jsText = await (await fetch(mainJS)).text();\n\t\tthis.cryptoService = new VCBCryptoManager(jsText);\n\t}\n\tprivate handlerAxiosRequest<T>(\n\t\trequest: Promise<any>,\n\t\tresolveResult = true,\n\t\tfunctionConvertResult?: any,\n\t): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\trequest\n\t\t\t\t.then((res) => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tresolveResult\n\t\t\t\t\t\t\t? typeof functionConvertResult == 'function'\n\t\t\t\t\t\t\t\t? functionConvertResult(res.data)\n\t\t\t\t\t\t\t\t: res.data\n\t\t\t\t\t\t\t: res,\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tif (axios.isAxiosError(error)) {\n\t\t\t\t\t\treject({\n\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\trequest: error.request,\n\t\t\t\t\t\t\tresponse: error.response,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n}\n","import { randomBytes } from 'crypto';\nimport forge from 'node-forge';\nimport { Buffer } from 'node:buffer';\nimport { Util } from './Util.js';\n\nexport class VCBCryptoManager {\n\t#isActive = false;\n\tprivate keys: any;\n\tprivate clientPublicKey: string = '';\n\tprivate clientPrivateKey: string = '';\n\tpublic defaultPublicKey = '';\n\tpublic uploadAES = '';\n\tpublic uploadHMac = '';\n\tpublic crcKey = '';\n\n\tconstructor(stringJS: string) {\n\t\tthis.defaultPublicKey = Util.findingValueFromJson(\n\t\t\t'publicKey',\n\t\t\tstringJS,\n\t\t);\n\t\tthis.uploadAES = Util.findingValueFromJson('uploadAES', stringJS);\n\t\tthis.uploadHMac = Util.findingValueFromJson('uploadHMac', stringJS);\n\t\tthis.crcKey = Util.findingValueFromJson('crcKey', stringJS);\n\t\tthis.genKeys();\n\t}\n\n\tget isActive() {\n\t\treturn this.#isActive;\n\t}\n\n\tencryptText(text: string): string {\n\t\tif (text && typeof text === 'string') {\n\t\t\tlet encoded = Buffer.from(text, 'utf-8').toString('base64');\n\t\t\tencoded = encoded.split('').reverse().join('');\n\t\t\treturn Buffer.from(encoded, 'utf-8').toString('base64');\n\t\t}\n\t\treturn text;\n\t}\n\n\tdecryptText(text: string): string {\n\t\tif (text && typeof text === 'string') {\n\t\t\tlet decoded = Buffer.from(text, 'base64').toString('utf-8');\n\t\t\tdecoded = decoded.split('').reverse().join('');\n\t\t\treturn Buffer.from(decoded, 'base64').toString('utf-8');\n\t\t}\n\t\treturn text;\n\t}\n\n\tgenKeys() {\n\t\tif (!this.keys) {\n\t\t\tthis.keys = forge.pki.rsa.generateKeyPair({\n\t\t\t\tbits: 1024,\n\t\t\t\tworkers: 1,\n\t\t\t});\n\t\t\tthis.clientPublicKey = forge.pki\n\t\t\t\t.publicKeyToPem(this.keys.publicKey)\n\t\t\t\t.replace(/(-|(BEGIN|END) PUBLIC KEY|\\r|\\n)/gi, '');\n\t\t\tthis.clientPrivateKey = forge.pki.privateKeyToPem(\n\t\t\t\tthis.keys.privateKey,\n\t\t\t);\n\t\t\tthis.#isActive = true;\n\t\t}\n\t}\n\n\tencryptRequest(data: object): { d: string; k: string } {\n\t\tconst aesKey = forge.random.getBytesSync(32);\n\t\tconst iv = forge.random.getBytesSync(16);\n\t\tconst requestData = {\n\t\t\tclientPubKey: this.clientPublicKey,\n\t\t\t...data,\n\t\t};\n\n\t\tconst cipher = forge.cipher.createCipher('AES-CTR', aesKey);\n\t\tcipher.start({ iv });\n\t\tcipher.update(\n\t\t\tforge.util.createBuffer(\n\t\t\t\tforge.util.encodeUtf8(JSON.stringify(requestData)),\n\t\t\t),\n\t\t);\n\t\tcipher.finish();\n\n\t\tconst encryptedData = Buffer.concat([\n\t\t\tBuffer.from(iv, 'binary'),\n\t\t\tBuffer.from(cipher.output.data, 'binary'),\n\t\t]);\n\t\tconst encryptedKey = forge.pki\n\t\t\t.publicKeyFromPem(forge.util.decode64(this.defaultPublicKey))\n\t\t\t.encrypt(forge.util.encode64(aesKey));\n\n\t\treturn {\n\t\t\td: encryptedData.toString('base64'),\n\t\t\tk: forge.util.encode64(encryptedKey),\n\t\t};\n\t}\n\n\tdecryptResponse(response: { k: string; d: string }): string {\n\t\tconst { k, d } = response;\n\t\tconst privateKey = forge.pki.privateKeyFromPem(this.clientPrivateKey);\n\t\tconst aesKey = forge.util.decodeUtf8(\n\t\t\tprivateKey.decrypt(forge.util.decode64(k)),\n\t\t);\n\t\tconst dataBuffer = Buffer.from(d, 'base64');\n\t\tconst iv = dataBuffer.slice(0, 16);\n\t\tconst encryptedData = dataBuffer.slice(16);\n\n\t\tconst decipher = forge.cipher.createDecipher(\n\t\t\t'AES-CTR',\n\t\t\tBuffer.from(aesKey, 'base64').toString('binary'),\n\t\t);\n\t\tdecipher.start({ iv: iv.toString('binary') });\n\t\tdecipher.update(forge.util.createBuffer(encryptedData));\n\t\tdecipher.finish();\n\n\t\treturn forge.util.decodeUtf8(decipher.output.data);\n\t}\n\n\tencryptDataText(text: string): string {\n\t\tif (text) {\n\t\t\treturn Buffer.from(encodeURIComponent(text), 'utf8')\n\t\t\t\t.toString('base64')\n\t\t\t\t.split('')\n\t\t\t\t.reverse()\n\t\t\t\t.join('');\n\t\t}\n\t\treturn '';\n\t}\n\n\tdecryptDataText(text: string): string {\n\t\tif (text) {\n\t\t\treturn decodeURIComponent(\n\t\t\t\tBuffer.from(\n\t\t\t\t\ttext.split('').reverse().join(''),\n\t\t\t\t\t'base64',\n\t\t\t\t).toString('utf8'),\n\t\t\t);\n\t\t}\n\t\treturn '';\n\t}\n\n\tencryptPCI(data: string, publicKey: string): string {\n\t\tif (!publicKey) {\n\t\t\tthrow new Error('Error crypto: not have publickey');\n\t\t}\n\t\tif (!publicKey.includes('BEGIN PUBLIC KEY')) {\n\t\t\tpublicKey = `-----BEGIN PUBLIC KEY-----\\n${publicKey}\\n-----END PUBLIC KEY-----`;\n\t\t}\n\t\tconst encryptedData = forge.pki\n\t\t\t.publicKeyFromPem(publicKey)\n\t\t\t.encrypt(data);\n\t\treturn forge.util.encode64(encryptedData);\n\t}\n\n\tsha256(data: string): string {\n\t\tconst sha256 = forge.md.sha256.create();\n\t\tsha256.update(data);\n\t\treturn sha256.digest().toHex();\n\t}\n\n\tgenerateKeyPCI(): { public: string; private: string } {\n\t\tconst keyPair = forge.pki.rsa.generateKeyPair({\n\t\t\tbits: 1024,\n\t\t\tworkers: 1,\n\t\t});\n\t\treturn {\n\t\t\tpublic: forge.pki\n\t\t\t\t.publicKeyToPem(keyPair.publicKey)\n\t\t\t\t.replace(/(-|(BEGIN|END) PUBLIC KEY|\\r|\\n)/gi, ''),\n\t\t\tprivate: forge.pki.privateKeyToPem(keyPair.privateKey),\n\t\t};\n\t}\n\n\tdecryptPCI(encryptedData: string, privateKey: string): string {\n\t\tif (!privateKey) {\n\t\t\tthrow new Error('Error crypto: not have privateKey');\n\t\t}\n\t\tif (!privateKey.includes('BEGIN RSA PRIVATE KEY')) {\n\t\t\tprivateKey = `-----BEGIN RSA PRIVATE KEY-----\\n${privateKey}\\n-----END RSA PRIVATE KEY-----`;\n\t\t}\n\t\tconst privateKeyObj = forge.pki.privateKeyFromPem(privateKey);\n\t\tconst decodedData = forge.util.decode64(encryptedData);\n\t\tconst decryptedData = privateKeyObj.decrypt(decodedData);\n\t\treturn forge.util.decodeUtf8(decryptedData);\n\t}\n\n\tdecryptLoginInsight(encryptedText: string, decryptInfo: any): string {\n\t\tconst { encryptInfo } = decryptInfo;\n\t\tconst { encryptKey, encryptSalt } = encryptInfo;\n\t\tconst key = forge.util.encodeUtf8(encryptKey);\n\t\tconst decipher = forge.cipher.createDecipher('AES-CTR', key);\n\t\tconst decodedText = forge.util.decode64(encryptedText);\n\n\t\tdecipher.start({ iv: encryptSalt });\n\t\tdecipher.update(forge.util.createBuffer(decodedText));\n\t\tdecipher.finish();\n\n\t\treturn forge.util.decodeUtf8(decipher.output.getBytes());\n\t}\n\n\tencryptInsightRequest(data: object, encryptInfo: any): string {\n\t\tconst { encryptKey, encryptSalt } = encryptInfo;\n\t\tif (!encryptKey) {\n\t\t\tthrow new Error('No ssID value. Please login.');\n\t\t}\n\t\tconst cipher = forge.cipher.createCipher(\n\t\t\t'AES-CTR',\n\t\t\tforge.util.encodeUtf8(encryptKey),\n\t\t);\n\t\tcipher.start({ iv: encryptSalt });\n\t\tcipher.update(\n\t\t\tforge.util.createBuffer(\n\t\t\t\tforge.util.encodeUtf8(JSON.stringify(data)),\n\t\t\t),\n\t\t);\n\t\tcipher.finish();\n\t\treturn forge.util.encode64(cipher.output.getBytes());\n\t}\n\n\tencryptUpload(data: object): {\n\t\ttimestamp: number;\n\t\tdata: string;\n\t\tdata_form: string;\n\t\tmac: string;\n\t\tmac_form: string;\n\t} {\n\t\tconst aesKey = this.uploadAES;\n\t\tconst hmacKey = this.uploadHMac;\n\t\tconst iv = randomBytes(16);\n\t\tconst stringifiedData = JSON.stringify(data);\n\n\t\tconst cipher = forge.cipher.createCipher(\n\t\t\t'AES-CTR',\n\t\t\tBuffer.from(aesKey, 'utf8').toString('binary'),\n\t\t);\n\t\tcipher.start({ iv: iv.toString('hex') });\n\t\tcipher.update(\n\t\t\tforge.util.createBuffer(forge.util.encodeUtf8(stringifiedData)),\n\t\t);\n\t\tcipher.finish();\n\n\t\tconst encryptedData = Buffer.concat([\n\t\t\tiv,\n\t\t\tBuffer.from(cipher.output.data, 'binary'),\n\t\t]);\n\t\tconst timestamp = Date.now();\n\n\t\tconst hmac = forge.hmac.create();\n\t\thmac.start('sha256', hmacKey);\n\t\thmac.update(encryptedData.toString('base64') + timestamp);\n\t\tconst mac = Buffer.from(hmac.getMac().data, 'binary');\n\n\t\treturn {\n\t\t\ttimestamp,\n\t\t\tdata: encodeURIComponent(encryptedData.toString('base64')),\n\t\t\tdata_form: encryptedData.toString('base64'),\n\t\t\tmac: encodeURIComponent(mac.toString('base64')),\n\t\t\tmac_form: mac.toString('base64'),\n\t\t};\n\t}\n\n\tdecryptUpload(encryptedData: string): string {\n\t\tconst aesKey = this.uploadAES;\n\t\tconst dataBuffer = Buffer.from(encryptedData, 'base64');\n\t\tconst iv = dataBuffer.slice(0, 16);\n\t\tconst encryptedContent = dataBuffer.slice(16);\n\n\t\tconst decipher = forge.cipher.createDecipher(\n\t\t\t'AES-CTR',\n\t\t\tBuffer.from(aesKey, 'utf8').toString('binary'),\n\t\t);\n\t\tdecipher.start({ iv: iv.toString('binary') });\n\t\tdecipher.update(forge.util.createBuffer(encryptedContent));\n\t\tdecipher.finish();\n\n\t\treturn forge.util.decodeUtf8(decipher.output.data);\n\t}\n}\n","import { createHash, randomBytes } from \"crypto\";\nimport { JSDOM } from \"jsdom\";\n\nexport class Util {\n\tstatic findingValueFromJson(key: string, text: string): string {\n\t\t// Create a regular expression to match the key and capture its value\n\t\tconst regex = new RegExp(`${key}\\\\s*:\\\\s*[\"']([^\"']*)[\"']`, 'i');\n\t\tconst match = text.match(regex);\n\n\t\t// If a match is found, return the captured value; otherwise, return null\n\t\treturn match ? match[1] : '';\n\t}\n\tstatic findMainJS(): Promise<string | null> {\n\t\treturn new Promise((r, e) => {\n\t\t\tfetch('https://vcbdigibank.vietcombank.com.vn/auth').then(_ => _.text()).then(text => {\n\t\t\t\tconst dom = new JSDOM(text);\n\n\t\t\t\t// Get all script tags from the document\n\t\t\t\tconst scriptTags =\n\t\t\t\t\tdom.window.document.querySelectorAll('script');\n\n\t\t\t\t// Regular expression to match the pattern main.{random}.js?v={any_version} or main.{random}.js\n\t\t\t\tconst regex = /main\\.\\w+\\.js(\\?v=[\\w\\.]+)?/i;\n\n\t\t\t\t// Iterate over the script tags to find the one that matches the pattern\n\t\t\t\tfor (let script of scriptTags) {\n\t\t\t\t\tif (script.src && regex.test(script.src)) {\n\t\t\t\t\t\treturn r(\"https://vcbdigibank.vietcombank.com.vn/\" + script.src); // Return the matching script src\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn r(null); // Return null if no match is found\n\t\t\t}).catch(e);\n\t\t});\n\t}\n\tstatic randomMD5() {\n\t\t// Generate a random buffer with a specified number of bytes\n\t\tconst randomBuffer = randomBytes(16); // 16 bytes = 128 bits, which is common for a secure random seed\n\n\t\t// Create an MD5 hash of the random buffer\n\t\tconst hash = createHash('md5').update(randomBuffer).digest('hex');\n\n\t\treturn hash;\n\t}\n}\n\n","export enum ErrorCode {\n\tINVALID_LOGIN_DATA = '3005',\n\tINVALID_CAPTCHA = '0111',\n\tNEW_BROWSER = '20231',\n\tUSING_PHONE_VERIFY_REQUESTED = '0126',\n\tUSING_PHONE_VERIFY_FAILED = '0101',\n\tDISABLE_WEB_LOGIN = '019',\n\tOK = '00',\n\tOTHER_DEVICES = '108',\n}\n\nexport interface VCBLoginSuccessResponse {\n\tmid: string;\n\tcode: string;\n\tdes: string;\n\tsessionId: string;\n\tclientIp: string;\n\taccessKey: string;\n\tuserInfo: {\n\t\tusername: string;\n\t\tcusId: string;\n\t\tmobileNo: string;\n\t\tcif: string;\n\t\tcusName: string;\n\t\tavatarUrl: string;\n\t\tcusEmail: string;\n\t\tcusEmailSeq: string;\n\t\tcreateUser: string;\n\t\tupdateUser: string;\n\t\tconfirmUser: string;\n\t\tresetPassDate: string;\n\t\tdefaultAccount: string;\n\t\tdefaultAccountNew: string;\n\t\tdefaultAccountType: string;\n\t\tdefaultAccountCcy: string;\n\t\tdefaultAccountProduct: string;\n\t\tdefaultAccountBranchCode: string;\n\t\tstatus: string;\n\t\tcusAddr: string;\n\t\tcusIdNumber: string;\n\t\tidType: string;\n\t\tissueDate: string;\n\t\tbirthday: string;\n\t\tsex: string;\n\t\tcusType: string;\n\t\tcusResident: string;\n\t\tnumConfirmOtp: string;\n\t\tnumOtpActSoft: string;\n\t\totpMethod: string;\n\t\tmobileId: string;\n\t\tclientId: string;\n\t\tregistChannel: string;\n\t\tcreatedDate: string;\n\t\treceiverOTP: string;\n\t\tlastLogin: string;\n\t\tcrossLogin: string;\n\t\tisActiveSMS: string;\n\t\tisLockedWeb: string;\n\t\tisLockedMB: string;\n\t\tchannelId: string;\n\t\temailSettings: string;\n\t\tpkgCode: string;\n\t\tbranchCode: string;\n\t\tmaxBalanceSubService: string;\n\t\tisPilot: string;\n\t\tisPilotSoftOTP: string;\n\t\tisPilotAtmDraw: string;\n\t\tisPilotVCBSmartApp: string;\n\t\tlistChannel: {\n\t\t\tchannel: string;\n\t\t\tchannelId: string;\n\t\t\tlastLogin: string;\n\t\t\tisLocked: string;\n\t\t\totpMethod: string;\n\t\t\tnumConfirmOTP: string;\n\t\t\tnumOtpActSoft: string;\n\t\t\tmethodOTP: string;\n\t\t\tappVer?: string;\n\t\t\tov?: string;\n\t\t\tos?: string;\n\t\t\timei?: string;\n\t\t\tdeviceType?: string;\n\t\t\ttouchPin?: string;\n\t\t\ttouchId?: string;\n\t\t}[];\n\t\tlockSession: boolean;\n\t\tomniSession: boolean;\n\t\tsessionId: string;\n\t\tlastUsed: string;\n\t\tconverted: boolean;\n\t\tuseVCBSoft: string;\n\t\thasOldSoft: string;\n\t\tvalidateLuckyAcc: boolean;\n\t\tvalidateOpenLoanFD: boolean;\n\t\tvalidateOpenAliasAcc: boolean;\n\t\tfailTime: number;\n\t\tisCheckCard: string;\n\t\tcheckVipTime: string;\n\t\tcusLevel: string;\n\t\tcustClass: string;\n\t\tacceptD13CollInfo: string;\n\t\tacceptHdgdat: string;\n\t\tcvpTheme: string;\n\t\tbestCVP: string;\n\t\tottKey: string;\n\t\tfacepayVerified: string;\n\t\tvalidIssue: boolean;\n\t\tvalidSMSOTP: boolean;\n\t};\n\tdurationExpire: string;\n\tfutureTransferLimitDay: string;\n\trecurringTransferLimitDay: string;\n\tuseFakeId: string;\n\tdefaultGreetingCode: string;\n\tisUserLoyalty: string;\n\tdurationWaiting: string;\n\tottKey: string;\n\ttags: {\n\t\tfunctionId: string;\n\t\ttagNameVi: string;\n\t\ttagNameEn: string;\n\t}[];\n\tisRegistedOTT: boolean;\n}\n\nexport interface VCBAccountDetailResponse {\n\tmid: string;\n\tcode: string;\n\tdes: string;\n\tclientIp: string;\n\taccountDetail: {\n\t\taccountNo: string;\n\t\tnewAccountNo: string;\n\t\tcif: string;\n\t\taddress: string;\n\t\tcustomerName: string;\n\t\taccruedInterest: string;\n\t\taccountType: string;\n\t\taccountCurr: string;\n\t\tavailBalance: string;\n\t\tavailBalanceWH: string;\n\t\tbranchCode: string;\n\t\tbranchName: string;\n\t\tgroupCode: string;\n\t\tholdBalance: string;\n\t\tinterest: string;\n\t\tcurrentBalance: string;\n\t\topenDate: string;\n\t\tproductTypeCode: string;\n\t\treserve8: string;\n\t\taccountStatus: string;\n\t\toverdraftBalance: string;\n\t\tlastTransactionDate: string;\n\t\toverdraftInterest: string;\n\t\tpdtNumber: number;\n\t\trowNum: number;\n\t\tjoinAccount: boolean;\n\t\ttlastsStatus: string[];\n\t\taliasName: never[];\n\t\tcurrency: string;\n\t\taccountNumber: string;\n\t};\n}\n\nexport interface VCBAllAccountDetailResponse {\n\tmid: string;\n\tcode: string;\n\tdes: string;\n\tclientIp: string;\n\taccountListNote: string;\n\tisDisbursement: string;\n\tcashBackAvail: string;\n\tDDAccounts: {\n\t\taccountNo: string;\n\t\tnewAccountNo: string;\n\t\tcif: string;\n\t\tcustomerName: string;\n\t\taccountType: string;\n\t\taccountCurr: string;\n\t\tavailBalance: string;\n\t\tavailableBalance: string;\n\t\tbranchCode: string;\n\t\tproductTypeCode: string;\n\t\taccountStatus: string;\n\t\tpdtNumber: number;\n\t\trowNum: number;\n\t\tjoinAccount: boolean;\n\t\tcurrency: string;\n\t\taccountNumber: string;\n\t}[];\n\tFDAccounts: any[];\n\tLNAccounts: any[];\n\tcards: {\n\t\tmaskingCardNumber: string;\n\t\texpireMonth: number;\n\t\texpireYear: number;\n\t\tcardHolderName: string;\n\t\tbrand: string;\n\t\tisDebit: boolean;\n\t\tblockCode: string;\n\t\tpdtNumber: number;\n\t\toutstandingBalance: number;\n\t\tcreditAvailable: number;\n\t\tcifCreditAvailable: number;\n\t\tcreditLimit: number;\n\t\tcashAvailable: string;\n\t\tcashLimit: number;\n\t\tsupRel: string;\n\t\taccountNumber: string;\n\t\tcurrency: string;\n\t\trrn: string;\n\t\tusageCode: string;\n\t\tcardBase: string;\n\t\tcardNumber: string;\n\t\tcardName: string;\n\t\tcardType: string;\n\t\tproductCode: string;\n\t\tproductTypeCode: string;\n\t\tcardNo: string;\n\t\texpireDate: string;\n\t\trowNum: number;\n\t\tcardStatus: string;\n\t\tcardAccount: string;\n\t\tissDate: string;\n\t\texpDate: string;\n\t\txpacCode: string;\n\t\taccStatus: string;\n\t\tavailBalance: string;\n\t\tcurrentBalance: string;\n\t\tpenaltyCharge: string;\n\t\tprofitAdd: string;\n\t\tinterest: string;\n\t\toverdraftBalance: string;\n\t\tholdBalance: string;\n\t\taccruedInterest: string;\n\t\temailRegisterOtp: string;\n\t\tproductName: string;\n\t\tproductNameEn: string;\n\t\turl: string;\n\t\tcardSize: string;\n\t\tcardModel: string;\n\t\ttokenDetail: string;\n\t\tpushProvisioning: string;\n\t\toverseaReg: string;\n\t\textendable: string;\n\t\tinstallmentHis: string;\n\t\tactivation: string;\n\t\tprocessView: string;\n\t\tisActive: string;\n\t\tusageCodeInternet: string;\n\t\tisCashback: string;\n\t\tissUrl: string;\n\t\tpriority: number;\n\t\ttoken: string;\n\t}[];\n\tnumDDAccounts: string;\n\tnumFDAccounts: string;\n\tnumLNAccounts: string;\n\tnumCardAccounts: string;\n}\n\nexport interface VCBGetTransactionsHistoryResponse {\n\tmid: string;\n\tcode: string;\n\tdes: string;\n\tclientIp: string;\n\ttransactions: {\n\t\ttranDate: string;\n\t\tcurCode: string;\n\t\tTransactionDate: string;\n\t\tReference: string;\n\t\tCD: string;\n\t\tAmount: string;\n\t\tDescription: string;\n\t\tPCTime: string;\n\t\tDorCCode: string;\n\t\tEffDate: string;\n\t\tPostingDate: string;\n\t\tPostingTime: string;\n\t\tRemark: string;\n\t\tSeqNo: string;\n\t\tTnxCode: string;\n\t\tTeller: string;\n\t}[];\n\tnextIndex: string;\n};","export const WEB = 'này';\n\nexport const Endpoints = {\n\tLOGIN: {\n\t\tprePoint: '/authen-service',\n\t\tendPoint: '/v1/login',\n\t\tmid: 6,\n\t},\n\tACCOUNT_DETAIL: {\n\t\tprePoint: '/bank-service',\n\t\tendPoint: '/v2/get-account-detail',\n\t\tmid: 13,\n\t},\n\tGET_LIST_ACCOUNT_VIA_CIF: {\n\t\tprePoint: '/bank-service',\n\t\tendPoint: '/v2/get-list-account-via-cif',\n\t\tmid: 8,\n\t},\n\tTRANSACTION_HISTORY: {\n\t\tprePoint: '/bank-service',\n\t\tendPoint: '/v1/transaction-history',\n\t\tmid: 14,\n\t},\n\tEXPORT_HIS_STATEMENT_ACCOUNT_EXCEL: {\n\t\tprePoint: '/utility-service',\n\t\tendPoint: '/v1/export-his-statement-account-excel',\n\t\tmid: 'export_account_excel',\n\t},\n};\n"],"mappings":";;;;AAAA,OAAO,WAAW;AAClB,SAAS,eAAe;AACxB,SAAS,iBAAiB;AAC1B,YAAY,SAAS;AACrB,OAAO,YAAY;AACnB,SAAS,cAAAA,aAAY,kBAAkB;;;ACLvC,SAAS,eAAAC,oBAAmB;AAC5B,OAAO,WAAW;AAClB,SAAS,UAAAC,eAAc;;;ACFvB,SAAS,YAAY,mBAAmB;AACxC,SAAS,aAAa;AAEf,IAAM,OAAN,MAAW;AAAA,EAHlB,OAGkB;AAAA;AAAA;AAAA,EACjB,OAAO,qBAAqB,KAAa,MAAsB;AAE9D,UAAM,QAAQ,IAAI,OAAO,GAAG,GAAG,6BAA6B,GAAG;AAC/D,UAAM,QAAQ,KAAK,MAAM,KAAK;AAG9B,WAAO,QAAQ,MAAM,CAAC,IAAI;AAAA,EAC3B;AAAA,EACA,OAAO,aAAqC;AAC3C,WAAO,IAAI,QAAQ,CAAC,GAAG,MAAM;AAC5B,YAAM,6CAA6C,EAAE,KAAK,OAAK,EAAE,KAAK,CAAC,EAAE,KAAK,UAAQ;AACrF,cAAM,MAAM,IAAI,MAAM,IAAI;AAG1B,cAAM,aACL,IAAI,OAAO,SAAS,iBAAiB,QAAQ;AAG9C,cAAM,QAAQ;AAGd,iBAAS,UAAU,YAAY;AAC9B,cAAI,OAAO,OAAO,MAAM,KAAK,OAAO,GAAG,GAAG;AACzC,mBAAO,EAAE,4CAA4C,OAAO,GAAG;AAAA,UAChE;AAAA,QACD;AAEA,eAAO,EAAE,IAAI;AAAA,MACd,CAAC,EAAE,MAAM,CAAC;AAAA,IACX,CAAC;AAAA,EACF;AAAA,EACA,OAAO,YAAY;AAElB,UAAM,eAAe,YAAY,EAAE;AAGnC,UAAM,OAAO,WAAW,KAAK,EAAE,OAAO,YAAY,EAAE,OAAO,KAAK;AAEhE,WAAO;AAAA,EACR;AACD;;;ADvCO,IAAM,mBAAN,MAAuB;AAAA,EAL9B,OAK8B;AAAA;AAAA;AAAA,EAC7B,YAAY;AAAA,EACJ;AAAA,EACA,kBAA0B;AAAA,EAC1B,mBAA2B;AAAA,EAC5B,mBAAmB;AAAA,EACnB,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,SAAS;AAAA,EAEhB,YAAY,UAAkB;AAC7B,SAAK,mBAAmB,KAAK;AAAA,MAC5B;AAAA,MACA;AAAA,IACD;AACA,SAAK,YAAY,KAAK,qBAAqB,aAAa,QAAQ;AAChE,SAAK,aAAa,KAAK,qBAAqB,cAAc,QAAQ;AAClE,SAAK,SAAS,KAAK,qBAAqB,UAAU,QAAQ;AAC1D,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,IAAI,WAAW;AACd,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,YAAY,MAAsB;AACjC,QAAI,QAAQ,OAAO,SAAS,UAAU;AACrC,UAAI,UAAUC,QAAO,KAAK,MAAM,OAAO,EAAE,SAAS,QAAQ;AAC1D,gBAAU,QAAQ,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE;AAC7C,aAAOA,QAAO,KAAK,SAAS,OAAO,EAAE,SAAS,QAAQ;AAAA,IACvD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,MAAsB;AACjC,QAAI,QAAQ,OAAO,SAAS,UAAU;AACrC,UAAI,UAAUA,QAAO,KAAK,MAAM,QAAQ,EAAE,SAAS,OAAO;AAC1D,gBAAU,QAAQ,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE;AAC7C,aAAOA,QAAO,KAAK,SAAS,QAAQ,EAAE,SAAS,OAAO;AAAA,IACvD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,UAAU;AACT,QAAI,CAAC,KAAK,MAAM;AACf,WAAK,OAAO,MAAM,IAAI,IAAI,gBAAgB;AAAA,QACzC,MAAM;AAAA,QACN,SAAS;AAAA,MACV,CAAC;AACD,WAAK,kBAAkB,MAAM,IAC3B,eAAe,KAAK,KAAK,SAAS,EAClC,QAAQ,sCAAsC,EAAE;AAClD,WAAK,mBAAmB,MAAM,IAAI;AAAA,QACjC,KAAK,KAAK;AAAA,MACX;AACA,WAAK,YAAY;AAAA,IAClB;AAAA,EACD;AAAA,EAEA,eAAe,MAAwC;AACtD,UAAM,SAAS,MAAM,OAAO,aAAa,EAAE;AAC3C,UAAM,KAAK,MAAM,OAAO,aAAa,EAAE;AACvC,UAAM,cAAc;AAAA,MACnB,cAAc,KAAK;AAAA,MACnB,GAAG;AAAA,IACJ;AAEA,UAAM,SAAS,MAAM,OAAO,aAAa,WAAW,MAAM;AAC1D,WAAO,MAAM,EAAE,GAAG,CAAC;AACnB,WAAO;AAAA,MACN,MAAM,KAAK;AAAA,QACV,MAAM,KAAK,WAAW,KAAK,UAAU,WAAW,CAAC;AAAA,MAClD;AAAA,IACD;AACA,WAAO,OAAO;AAEd,UAAM,gBAAgBA,QAAO,OAAO;AAAA,MACnCA,QAAO,KAAK,IAAI,QAAQ;AAAA,MACxBA,QAAO,KAAK,OAAO,OAAO,MAAM,QAAQ;AAAA,IACzC,CAAC;AACD,UAAM,eAAe,MAAM,IACzB,iBAAiB,MAAM,KAAK,SAAS,KAAK,gBAAgB,CAAC,EAC3D,QAAQ,MAAM,KAAK,SAAS,MAAM,CAAC;AAErC,WAAO;AAAA,MACN,GAAG,cAAc,SAAS,QAAQ;AAAA,MAClC,GAAG,MAAM,KAAK,SAAS,YAAY;AAAA,IACpC;AAAA,EACD;AAAA,EAEA,gBAAgB,UAA4C;AAC3D,UAAM,EAAE,GAAG,EAAE,IAAI;AACjB,UAAM,aAAa,MAAM,IAAI,kBAAkB,KAAK,gBAAgB;AACpE,UAAM,SAAS,MAAM,KAAK;AAAA,MACzB,WAAW,QAAQ,MAAM,KAAK,SAAS,CAAC,CAAC;AAAA,IAC1C;AACA,UAAM,aAAaA,QAAO,KAAK,GAAG,QAAQ;AAC1C,UAAM,KAAK,WAAW,MAAM,GAAG,EAAE;AACjC,UAAM,gBAAgB,WAAW,MAAM,EAAE;AAEzC,UAAM,WAAW,MAAM,OAAO;AAAA,MAC7B;AAAA,MACAA,QAAO,KAAK,QAAQ,QAAQ,EAAE,SAAS,QAAQ;AAAA,IAChD;AACA,aAAS,MAAM,EAAE,IAAI,GAAG,SAAS,QAAQ,EAAE,CAAC;AAC5C,aAAS,OAAO,MAAM,KAAK,aAAa,aAAa,CAAC;AACtD,aAAS,OAAO;AAEhB,WAAO,MAAM,KAAK,WAAW,SAAS,OAAO,IAAI;AAAA,EAClD;AAAA,EAEA,gBAAgB,MAAsB;AACrC,QAAI,MAAM;AACT,aAAOA,QAAO,KAAK,mBAAmB,IAAI,GAAG,MAAM,EACjD,SAAS,QAAQ,EACjB,MAAM,EAAE,EACR,QAAQ,EACR,KAAK,EAAE;AAAA,IACV;AACA,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB,MAAsB;AACrC,QAAI,MAAM;AACT,aAAO;AAAA,QACNA,QAAO;AAAA,UACN,KAAK,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE;AAAA,UAChC;AAAA,QACD,EAAE,SAAS,MAAM;AAAA,MAClB;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,WAAW,MAAc,WAA2B;AACnD,QAAI,CAAC,WAAW;AACf,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,QAAI,CAAC,UAAU,SAAS,kBAAkB,GAAG;AAC5C,kBAAY;AAAA,EAA+B,SAAS;AAAA;AAAA,IACrD;AACA,UAAM,gBAAgB,MAAM,IAC1B,iBAAiB,SAAS,EAC1B,QAAQ,IAAI;AACd,WAAO,MAAM,KAAK,SAAS,aAAa;AAAA,EACzC;AAAA,EAEA,OAAO,MAAsB;AAC5B,UAAM,SAAS,MAAM,GAAG,OAAO,OAAO;AACtC,WAAO,OAAO,IAAI;AAClB,WAAO,OAAO,OAAO,EAAE,MAAM;AAAA,EAC9B;AAAA,EAEA,iBAAsD;AACrD,UAAM,UAAU,MAAM,IAAI,IAAI,gBAAgB;AAAA,MAC7C,MAAM;AAAA,MACN,SAAS;AAAA,IACV,CAAC;AACD,WAAO;AAAA,MACN,QAAQ,MAAM,IACZ,eAAe,QAAQ,SAAS,EAChC,QAAQ,sCAAsC,EAAE;AAAA,MAClD,SAAS,MAAM,IAAI,gBAAgB,QAAQ,UAAU;AAAA,IACtD;AAAA,EACD;AAAA,EAEA,WAAW,eAAuB,YAA4B;AAC7D,QAAI,CAAC,YAAY;AAChB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACpD;AACA,QAAI,CAAC,WAAW,SAAS,uBAAuB,GAAG;AAClD,mBAAa;AAAA,EAAoC,UAAU;AAAA;AAAA,IAC5D;AACA,UAAM,gBAAgB,MAAM,IAAI,kBAAkB,UAAU;AAC5D,UAAM,cAAc,MAAM,KAAK,SAAS,aAAa;AACrD,UAAM,gBAAgB,cAAc,QAAQ,WAAW;AACvD,WAAO,MAAM,KAAK,WAAW,aAAa;AAAA,EAC3C;AAAA,EAEA,oBAAoB,eAAuB,aAA0B;AACpE,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,EAAE,YAAY,YAAY,IAAI;AACpC,UAAM,MAAM,MAAM,KAAK,WAAW,UAAU;AAC5C,UAAM,WAAW,MAAM,OAAO,eAAe,WAAW,GAAG;AAC3D,UAAM,cAAc,MAAM,KAAK,SAAS,aAAa;AAErD,aAAS,MAAM,EAAE,IAAI,YAAY,CAAC;AAClC,aAAS,OAAO,MAAM,KAAK,aAAa,WAAW,CAAC;AACpD,aAAS,OAAO;AAEhB,WAAO,MAAM,KAAK,WAAW,SAAS,OAAO,SAAS,CAAC;AAAA,EACxD;AAAA,EAEA,sBAAsB,MAAc,aAA0B;AAC7D,UAAM,EAAE,YAAY,YAAY,IAAI;AACpC,QAAI,CAAC,YAAY;AAChB,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAC/C;AACA,UAAM,SAAS,MAAM,OAAO;AAAA,MAC3B;AAAA,MACA,MAAM,KAAK,WAAW,UAAU;AAAA,IACjC;AACA,WAAO,MAAM,EAAE,IAAI,YAAY,CAAC;AAChC,WAAO;AAAA,MACN,MAAM,KAAK;AAAA,QACV,MAAM,KAAK,WAAW,KAAK,UAAU,IAAI,CAAC;AAAA,MAC3C;AAAA,IACD;AACA,WAAO,OAAO;AACd,WAAO,MAAM,KAAK,SAAS,OAAO,OAAO,SAAS,CAAC;AAAA,EACpD;AAAA,EAEA,cAAc,MAMZ;AACD,UAAM,SAAS,KAAK;AACpB,UAAM,UAAU,KAAK;AACrB,UAAM,KAAKC,aAAY,EAAE;AACzB,UAAM,kBAAkB,KAAK,UAAU,IAAI;AAE3C,UAAM,SAAS,MAAM,OAAO;AAAA,MAC3B;AAAA,MACAD,QAAO,KAAK,QAAQ,MAAM,EAAE,SAAS,QAAQ;AAAA,IAC9C;AACA,WAAO,MAAM,EAAE,IAAI,GAAG,SAAS,KAAK,EAAE,CAAC;AACvC,WAAO;AAAA,MACN,MAAM,KAAK,aAAa,MAAM,KAAK,WAAW,eAAe,CAAC;AAAA,IAC/D;AACA,WAAO,OAAO;AAEd,UAAM,gBAAgBA,QAAO,OAAO;AAAA,MACnC;AAAA,MACAA,QAAO,KAAK,OAAO,OAAO,MAAM,QAAQ;AAAA,IACzC,CAAC;AACD,UAAM,YAAY,KAAK,IAAI;AAE3B,UAAM,OAAO,MAAM,KAAK,OAAO;AAC/B,SAAK,MAAM,UAAU,OAAO;AAC5B,SAAK,OAAO,cAAc,SAAS,QAAQ,IAAI,SAAS;AACxD,UAAM,MAAMA,QAAO,KAAK,KAAK,OAAO,EAAE,MAAM,QAAQ;AAEpD,WAAO;AAAA,MACN;AAAA,MACA,MAAM,mBAAmB,cAAc,SAAS,QAAQ,CAAC;AAAA,MACzD,WAAW,cAAc,SAAS,QAAQ;AAAA,MAC1C,KAAK,mBAAmB,IAAI,SAAS,QAAQ,CAAC;AAAA,MAC9C,UAAU,IAAI,SAAS,QAAQ;AAAA,IAChC;AAAA,EACD;AAAA,EAEA,cAAc,eAA+B;AAC5C,UAAM,SAAS,KAAK;AACpB,UAAM,aAAaA,QAAO,KAAK,eAAe,QAAQ;AACtD,UAAM,KAAK,WAAW,MAAM,GAAG,EAAE;AACjC,UAAM,mBAAmB,WAAW,MAAM,EAAE;AAE5C,UAAM,WAAW,MAAM,OAAO;AAAA,MAC7B;AAAA,MACAA,QAAO,KAAK,QAAQ,MAAM,EAAE,SAAS,QAAQ;AAAA,IAC9C;AACA,aAAS,MAAM,EAAE,IAAI,GAAG,SAAS,QAAQ,EAAE,CAAC;AAC5C,aAAS,OAAO,MAAM,KAAK,aAAa,gBAAgB,CAAC;AACzD,aAAS,OAAO;AAEhB,WAAO,MAAM,KAAK,WAAW,SAAS,OAAO,IAAI;AAAA,EAClD;AACD;;;AEnRO,IAAK,YAAL,kBAAKE,eAAL;AACN,EAAAA,WAAA,wBAAqB;AACrB,EAAAA,WAAA,qBAAkB;AAClB,EAAAA,WAAA,iBAAc;AACd,EAAAA,WAAA,kCAA+B;AAC/B,EAAAA,WAAA,+BAA4B;AAC5B,EAAAA,WAAA,uBAAoB;AACpB,EAAAA,WAAA,QAAK;AACL,EAAAA,WAAA,mBAAgB;AARL,SAAAA;AAAA,GAAA;;;ACAL,IAAM,MAAM;AAEZ,IAAM,YAAY;AAAA,EACxB,OAAO;AAAA,IACN,UAAU;AAAA,IACV,UAAU;AAAA,IACV,KAAK;AAAA,EACN;AAAA,EACA,gBAAgB;AAAA,IACf,UAAU;AAAA,IACV,UAAU;AAAA,IACV,KAAK;AAAA,EACN;AAAA,EACA,0BAA0B;AAAA,IACzB,UAAU;AAAA,IACV,UAAU;AAAA,IACV,KAAK;AAAA,EACN;AAAA,EACA,qBAAqB;AAAA,IACpB,UAAU;AAAA,IACV,UAAU;AAAA,IACV,KAAK;AAAA,EACN;AAAA,EACA,oCAAoC;AAAA,IACnC,UAAU;AAAA,IACV,UAAU;AAAA,IACV,KAAK;AAAA,EACN;AACD;;;AJXO,IAAM,gBAAN,MAAoB;AAAA,EAjB3B,OAiB2B;AAAA;AAAA;AAAA,EAC1B,MAAM,IAAI,UAAU;AAAA,EACpB;AAAA,EACA,SAAS;AAAA,IACR,MAAM,OAAO;AAAA,MACZ,KAAK,KAAK;AAAA,MACV,SAAS;AAAA,QACR,cACC;AAAA,QACD,QAAQ;AAAA,QACR,mBACC;AAAA,QACD,aACC;AAAA,QACD,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,kBAAkB;AAAA,QAClB,kBAAkB;AAAA,QAClB,kBAAkB;AAAA,QAClB,aAAa;AAAA,QACb,SAAS;AAAA,QACT,mBAAmB;AAAA,MACpB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA;AAAA,EACA,eAAe,WAAW;AAAA,EAC1B,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA;AAAA,EACV,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,aAAa;AAAA,EACL,iBAAiB;AAExB,UAAM,cAAc,OAAO,KAAK,IAAI,CAAC;AACrC,UAAM,cAAc,OAAO,KAAK,MAAM,MAAM,KAAK,OAAO,CAAC,CAAC;AAC1D,UAAM,cAAkB,UAAM,KAAK,SAAS,EAAE,SAAS,EAAE;AACzD,UAAM,YAAY,GAAG,WAAW,GAAG,WAAW,GAAG,WAAW;AAE5D,UAAM,SAASC,YAAW,QAAQ;AAClC,UAAM,QAAQ,OACZ,OAAO,KAAK,YAAY,KAAK,cAAc,MAAM,EACjD,OAAO,KAAK;AACd,WAAO;AAAA,MACN,YAAY;AAAA,MACZ,gBAAgB;AAAA,IACjB;AAAA,EACD;AAAA,EACA,YAAY,WAAmB;AAC9B,QAAI,WAAW;AACd,WAAK,YAAY;AAAA,IAClB,OAAO;AACN,YAAM,IAAI,MAAM,sBAAsB;AAAA,QACrC,OAAO,sCAAyB,GAAG;AAAA,MACpC,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EACQ,gBAAmB,KAAa,MAAuB;AAC9D,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,UAAI,CAAC,KAAK,eAAe;AACxB;AAAA,UACC,IAAI;AAAA,YACH;AAAA,UACD;AAAA,QACD;AAAA,MACD;AACA,WAAK;AAAA,QACJ,KAAK,OAAO,KAAK,KAAK,KAAK,cAAc,eAAe,IAAI,GAAG;AAAA,UAC9D,SAAS,KAAK,eAAe;AAAA,QAC9B,CAAC;AAAA,QACD;AAAA,QACA,CAACC,UACA,KAAK,MAAM,KAAK,cAAc,gBAAgBA,KAAI,CAAC;AAAA,MACrD,EACE,MAAM,MAAM,EACZ,KAAK,CAAC,QAAQ;AACd,YAAI,CAAC,KAAK;AACT,iBAAO,IAAI,MAAM,kBAAkB,CAAC;AAAA,QACrC,OAAO;AACN,kBAAQ,GAAG;AAAA,QACZ;AAAA,MACD,CAAC;AAAA,IACH,CAAC;AAAA,EACF;AAAA,EACA,MAAM,UAAkB,UAAkB,SAAiB;AAC1D,WAAO,IAAI,QAAiC,CAAC,SAAS,WAAW;AAChE,WAAK,YAAY;AACjB,WAAK,YAAY;AACjB,WAAK;AAAA,QACJ,uCACC,UAAU,MAAM,WAChB,UAAU,MAAM;AAAA,QACjB;AAAA,UACC,MAAM;AAAA,UACN;AAAA,UACA,cAAc;AAAA,UACd,WAAW,KAAK;AAAA,UAChB,KAAK,UAAU,MAAM;AAAA,UACrB,cAAc,KAAK;AAAA,UACnB,MAAM;AAAA,UACN,GAAG;AAAA,UACH,WAAW;AAAA,UACX,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA;AAAA,UACJ,YAAY;AAAA,QACb;AAAA,MACD,EACE,MAAM,MAAM,EACZ,KAAK,CAAC,QAAQ;AACd,YAAI,KAAK;AACR,kBAAQ,IAAI,MAAM;AAAA,YACjB,mCAAgC;AAC/B,qBAAO;AAAA,gBACN,IAAI,MAAM,mBAAmB;AAAA,kBAC5B,OAAO,IAAI;AAAA,gBACZ,CAAC;AAAA,cACF;AAAA,YACD;AAAA,YACA;AAAA,YACA,gDAA6C;AAC5C,qBAAO;AAAA,gBACN,IAAI,MAAM,gBAAgB;AAAA,kBACzB,OAAO;AAAA,gBACR,CAAC;AAAA,cACF;AAAA,YACD;AAAA,YACA,oCAAkC;AACjC,qBAAO;AAAA,gBACN,IAAI,MAAM,qBAAqB;AAAA,kBAC9B,OAAO;AAAA,gBACR,CAAC;AAAA,cACF;AAAA,YACD;AAAA,YACA,sCAAmC;AAClC,qBAAO;AAAA,gBACN,IAAI,MAAM,sBAAsB;AAAA,kBAC/B,OAAO,IAAI;AAAA,gBACZ,CAAC;AAAA,cACF;AAAA,YACD;AAAA,YACA,gCAA4B;AAC3B,qBAAO;AAAA,gBACN,IAAI,MAAM,eAAe;AAAA,kBACxB,OAAO,oLAAmG,GAAG;AAAA;AAAA;AAAA,gBAC9G,CAAC;AAAA,cACF;AAAA,YACD;AAAA,YACA,oBAAmB;AAClB,mBAAK,UAAU,IAAI;AACnB,mBAAK,OAAO,IAAI,SAAS;AACzB,mBAAK,YAAY,IAAI,SAAS;AAC9B,mBAAK,aAAa,IAAI,SAAS;AAC/B,mBAAK,YAAY,IAAI,SAAS;AAC9B,qBAAO,QAAQ,GAAG;AAAA,YACnB;AAAA,YACA,SAAS;AACR,qBAAO;AAAA,gBACN,IAAI,MAAM,iBAAiB;AAAA,kBAC1B,OAAO;AAAA,gBACR,CAAC;AAAA,cACF;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACH,CAAC;AAAA,EACF;AAAA,EACA,gBAAgB;AACf,WAAO,IAAI,QAAqC,CAAC,SAAS,WAAW;AACpE,WAAK;AAAA,QACJ,uCACC,UAAU,yBAAyB,WACnC,UAAU,yBAAyB;AAAA,QACpC;AAAA,UACC,KAAK,UAAU,yBAAyB;AAAA,UACxC,MAAM;AAAA,UACN,MAAM,KAAK;AAAA,UACX,KAAK,KAAK;AAAA,UACV,UAAU,KAAK;AAAA,UACf,UAAU,KAAK;AAAA,UACf,WAAW,KAAK;AAAA,UAChB,GAAG;AAAA,UACH,WAAW,KAAK;AAAA,UAChB,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,YAAY;AAAA,QACb;AAAA,MACD,EACE,MAAM,MAAM,EACZ,KAAK,CAAC,QAAQ;AACd,YAAI,CAAC,KAAK;AACT,iBAAO,IAAI,MAAM,kBAAkB,CAAC;AAAA,QACrC,OAAO;AACN,cAAI,IAAI,wBAAuB;AAC9B;AAAA,cACC,IAAI,MAAM,oBAAoB;AAAA,gBAC7B,OAAO;AAAA,cACR,CAAC;AAAA,YACF;AAAA,UACD,OAAO;AACN,oBAAQ,GAAG;AAAA,UACZ;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACH,CAAC;AAAA,EACF;AAAA,EACA,iBAAiB,WAAmB,cAAc,KAAK;AACtD,WAAO,IAAI,QAAkC,CAAC,SAAS,WAAW;AACjE,WAAK;AAAA,QACJ,uCACC,UAAU,eAAe,WACzB,UAAU,eAAe;AAAA,QAC1B;AAAA,UACC,KAAK,UAAU,eAAe;AAAA,UAC9B,MAAM;AAAA,UACN,MAAM,KAAK;AAAA,UACX,KAAK,KAAK;AAAA,UACV,UAAU,KAAK;AAAA,UACf,UAAU,KAAK;AAAA,UACf,WAAW,KAAK;AAAA,UAChB,GAAG;AAAA,UACH,WAAW,KAAK;AAAA,UAChB,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,YAAY;AAAA,UACZ;AAAA,UACA;AAAA,QACD;AAAA,MACD,EACE,MAAM,MAAM,EACZ,KAAK,CAAC,QAAQ;AACd,YAAI,CAAC,KAAK;AACT,iBAAO,IAAI,MAAM,kBAAkB,CAAC;AAAA,QACrC,OAAO;AACN,cAAI,IAAI,wBAAuB;AAC9B;AAAA,cACC,IAAI,MAAM,oBAAoB;AAAA,gBAC7B,OAAO;AAAA,cACR,CAAC;AAAA,YACF;AAAA,UACD,OAAO;AACN,oBAAQ,GAAG;AAAA,UACZ;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACH,CAAC;AAAA,EACF;AAAA,EACA,uBACC,WACA,cAAc,KACd,UACA,SAAS,oBAAI,KAAK,GACjB;AACD,WAAO,IAAI;AAAA,MACV,CAAC,SAAS,WAAW;AACpB,YAAI,SAAS,QAAQ,IAAI,OAAO,QAAQ,GAAG;AAC1C;AAAA,YACC,IAAI,MAAM,gBAAgB;AAAA,cACzB,OAAO;AAAA,YACR,CAAC;AAAA,UACF;AAAA,QACD;AACA,aAAK;AAAA,UACJ,uCACC,UAAU,oBAAoB,WAC9B,UAAU,oBAAoB;AAAA,UAC/B;AAAA,YACC;AAAA,YACA;AAAA,YACA,UAAU,OAAO,QAAQ,EAAE,OAAO,YAAY;AAAA,YAC9C,QAAQ,OAAO,MAAM,EAAE,OAAO,YAAY;AAAA,YAC1C,WAAW;AAAA,YACX,cAAc;AAAA,YACd,KAAK,UAAU,oBAAoB;AAAA,YACnC,MAAM;AAAA,YACN,MAAM,KAAK;AAAA,YACX,KAAK,KAAK;AAAA,YACV,UAAU,KAAK;AAAA,YACf,UAAU,KAAK;AAAA,YACf,WAAW,KAAK;AAAA,YAChB,GAAG;AAAA,YACH,WAAW,KAAK;AAAA,YAChB,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,YAAY;AAAA,UACb;AAAA,QACD,EACE,MAAM,MAAM,EACZ,KAAK,CAAC,QAAQ;AACd,cAAI,CAAC,KAAK;AACT,mBAAO,IAAI,MAAM,kBAAkB,CAAC;AAAA,UACrC,OAAO;AACN,gBAAI,IAAI,wBAAuB;AAC9B;AAAA,gBACC,IAAI,MAAM,oBAAoB;AAAA,kBAC7B,OAAO;AAAA,gBACR,CAAC;AAAA,cACF;AAAA,YACD,OAAO;AACN,sBAAQ,GAAG;AAAA,YACZ;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACH;AAAA,IACD;AAAA,EACD;AAAA,EACA,4BACC,WACA,cAAc,KACd,UACA,SAAS,oBAAI,KAAK,GACjB;AACD,WAAO,IAAI,QAGR,CAAC,SAAS,WAAW;AACvB,UAAI,SAAS,QAAQ,IAAI,OAAO,QAAQ,GAAG;AAC1C;AAAA,UACC,IAAI,MAAM,gBAAgB;AAAA,YACzB,OAAO;AAAA,UACR,CAAC;AAAA,QACF;AAAA,MACD;AACA,WAAK;AAAA,QACJ,KAAK,OAAO;AAAA,UACX,uCACC,UAAU,mCAAmC,WAC7C,UAAU,mCAAmC;AAAA,UAC9C,KAAK,cAAc,eAAe;AAAA,YACjC,aAAa;AAAA,YACb,YAAY;AAAA,YACZ;AAAA,YACA;AAAA,YACA,UAAU,OAAO,QAAQ,EAAE,OAAO,YAAY;AAAA,YAC9C,QAAQ,OAAO,MAAM,EAAE,OAAO,YAAY;AAAA,YAC1C,WAAW;AAAA,YACX,cAAc;AAAA,YACd,UAAU;AAAA,YACV,UAAU;AAAA,YACV,mBAAmB;AAAA,YACnB,MAAM;AAAA,YACN,KAAK,UAAU,mCAAmC;AAAA,YAClD,MAAM,KAAK;AAAA,YACX,KAAK,KAAK;AAAA,YACV,UAAU,KAAK;AAAA,YACf,UAAU,KAAK;AAAA,YACf,WAAW,KAAK;AAAA,YAChB,GAAG;AAAA,YACH,WAAW,KAAK;AAAA,YAChB,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,YAAY;AAAA,UACb,CAAC;AAAA,UACD;AAAA,YACC,cAAc;AAAA,UACf;AAAA,QACD;AAAA,QACA;AAAA,MACD,EACE,MAAM,MAAM,EACZ,KAAK,CAAC,QAAQ;AACd,YAAI,CAAC,KAAK;AACT,iBAAO,IAAI,MAAM,kBAAkB,CAAC;AAAA,QACrC,OAAO;AACN,kBAAQ;AAAA,YACP,MAAM;AAAA,YACN,MAAM;AAAA,UACP,CAAC;AAAA,QACF;AAAA,MACD,CAAC;AAAA,IACH,CAAC;AAAA,EACF;AAAA,EACA,aAAa;AACZ,WAAO,KAAK;AAAA,MACX,KAAK,OAAO;AAAA,QACX,wEACC,KAAK;AAAA,QACN;AAAA,UACC,cAAc;AAAA,QACf;AAAA,MACD;AAAA,MACA;AAAA,MACA,CAAC,SAAc,OAAO,KAAK,IAAI;AAAA,IAChC;AAAA,EACD;AAAA,EACA,MAAM,OAAO;AACZ,UAAM,SAAS,MAAM,KAAK,WAAW;AACrC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AACA,UAAM,SAAS,OAAO,MAAM,MAAM,MAAM,GAAG,KAAK;AAChD,SAAK,gBAAgB,IAAI,iBAAiB,MAAM;AAAA,EACjD;AAAA,EACQ,oBACP,SACA,gBAAgB,MAChB,uBACa;AACb,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,cACE,KAAK,CAAC,QAAQ;AACd;AAAA,UACC,gBACG,OAAO,yBAAyB,aAC/B,sBAAsB,IAAI,IAAI,IAC9B,IAAI,OACL;AAAA,QACJ;AAAA,MACD,CAAC,EACA,MAAM,CAAC,UAAU;AACjB,YAAI,MAAM,aAAa,KAAK,GAAG;AAC9B,iBAAO;AAAA,YACN,SAAS,MAAM;AAAA,YACf,SAAS,MAAM;AAAA,YACf,UAAU,MAAM;AAAA,UACjB,CAAC;AAAA,QACF,OAAO;AACN,iBAAO,KAAK;AAAA,QACb;AAAA,MACD,CAAC;AAAA,IACH,CAAC;AAAA,EACF;AACD;","names":["createHash","randomBytes","Buffer","Buffer","randomBytes","ErrorCode","createHash","data"]}